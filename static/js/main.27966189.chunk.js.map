{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","api/api.js","components/FindMovie/FindMovie.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","key","imdbId","getMovie","fetch","then","response","json","FindMovie","onAdd","useState","query","setQuery","error","setError","setMovie","getMovieFromServer","a","newMovie","Response","Title","Plot","Poster","imdbID","onSubmit","event","preventDefault","htmlFor","type","id","placeholder","classnames","value","onChange","target","onClick","App","data","setMovies","some","film","currentMovie","ReactDOM","render","document","getElementById"],"mappings":"mxEAIaA,G,kBAAY,SAAC,GAAD,IACvBC,EADuB,EACvBA,MADuB,IAEvBC,mBAFuB,MAET,GAFS,EAGvBC,EAHuB,EAGvBA,OACAC,EAJuB,EAIvBA,QAJuB,OAMvB,yBAAKC,UAAU,QACb,yBAAKA,UAAU,cACb,4BAAQA,UAAU,iBAChB,yBACEC,IAAKH,EACLI,IAAI,gBAIV,yBAAKF,UAAU,gBACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,cACb,4BAAQA,UAAU,kBAChB,yBACEC,IAAI,wBACJC,IAAI,WAIV,yBAAKF,UAAU,iBACb,uBAAGA,UAAU,cAAcJ,KAI/B,yBAAKI,UAAU,WACZH,EACD,6BACA,uBAAGM,KAAMJ,GAAT,aC/BKK,EAAa,SAAC,GAAD,QACxBC,cADwB,MACf,GADe,SAGxB,yBAAKL,UAAU,UACZK,EAAOC,KAAI,SAAAC,GAAK,OACf,kBAAC,EAAD,eAAWC,IAAKD,EAAME,QAAYF,S,6CCTjC,SAASG,EAASd,GACvB,OAAOe,MAAM,GAAD,OAHA,4CAGA,aAAiBf,IAC1BgB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UCIxB,IAAMC,EAAY,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAAY,EACZC,mBAAS,IADG,mBAC/BC,EAD+B,KACxBC,EADwB,OAEZF,oBAAS,GAFG,mBAE/BG,EAF+B,KAExBC,EAFwB,OAGZJ,qBAHY,mBAG/BV,EAH+B,KAGxBe,EAHwB,KAKhCC,EAAkB,uCAAG,WAAM3B,GAAN,eAAA4B,EAAA,sEACFd,EAASd,GADP,UAGC,WAFpB6B,EADmB,QAGZC,SAHY,uBAIvBJ,EAAS,MACTD,GAAS,GALc,0BAUzBC,EAAS,CACP1B,MAAO6B,EAASE,MAChB9B,YAAa4B,EAASG,KACtB9B,OAAQ2B,EAASI,OACjBpB,OAAQgB,EAASK,OACjB/B,QAAQ,8BAAD,OAAgC0B,EAASK,UAfzB,2CAAH,sDA0BxB,OACE,oCACE,0BACE9B,UAAU,aACV+B,SAXe,SAACC,GACpBA,EAAMC,iBAENd,EAAS,IACTH,EAAMT,KASF,yBAAKP,UAAU,SACb,2BAAOA,UAAU,QAAQkC,QAAQ,eAAjC,eAIA,yBAAKlC,UAAU,WACb,2BACEmC,KAAK,OACLC,GAAG,cACHC,YAAY,0BACZrC,UAAWsC,IAAW,QAAS,CAC7B,YAAalB,IAEfmB,MAAOrB,EACPsB,SAAU,SAACR,GACTb,EAASa,EAAMS,OAAOF,OACtBlB,GAAS,OAKdD,GACC,uBAAGpB,UAAU,kBAAb,yCAMJ,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,WACb,4BACEmC,KAAK,SACLnC,UAAU,kBACV0C,QAAS,kBAAMnB,EAAmBL,KAHpC,iBASF,yBAAKlB,UAAU,WACb,4BACEmC,KAAK,SACLnC,UAAU,qBAFZ,sBAULO,GACC,yBAAKP,UAAU,aACb,wBAAIA,UAAU,SAAd,WACA,kBAAC,EAAcO,M,OC5FZoC,EAAM,WAAO,IAAD,EACK1B,mBAAS2B,GADd,mBAChBvC,EADgB,KACRwC,EADQ,KAWvB,OACE,yBAAK7C,UAAU,QACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CAAYK,OAAQA,KAEtB,yBAAKL,UAAU,WACb,kBAAC,EAAD,CAAWgB,MAdA,SAACT,GACQF,EAAOyC,MAAK,SAAAC,GAAI,OAAIA,EAAKtC,SAAWF,EAAME,WAGhEoC,GAAU,SAAAG,GAAY,4BAASA,GAAT,CAAuBzC,aCRnD0C,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.27966189.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\nimport PropTypes from 'prop-types';\n\nexport const MovieCard = ({\n  title,\n  description = '',\n  imgUrl,\n  imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport PropTypes from 'prop-types';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({\n  movies = [],\n}) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      imdbId: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n","const BASE_URL = `https://www.omdbapi.com/?apikey=5e79351c&`;\n\nexport function getMovie(title) {\n  return fetch(`${BASE_URL}t=${title}`)\n    .then(response => response.json());\n}\n","import React, { useState } from 'react';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\nimport './FindMovie.scss';\n\nimport { MovieCard } from '../MovieCard';\nimport { getMovie } from '../../api/api';\n\nexport const FindMovie = ({ onAdd }) => {\n  const [query, setQuery] = useState('');\n  const [error, setError] = useState(false);\n  const [movie, setMovie] = useState();\n\n  const getMovieFromServer = async(title) => {\n    const newMovie = await getMovie(title);\n\n    if (newMovie.Response === 'False') {\n      setMovie(null);\n      setError(true);\n\n      return;\n    }\n\n    setMovie({\n      title: newMovie.Title,\n      description: newMovie.Plot,\n      imgUrl: newMovie.Poster,\n      imdbId: newMovie.imdbID,\n      imdbUrl: `https://www.imdb.com/title/${newMovie.imdbID}`,\n    });\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    setQuery('');\n    onAdd(movie);\n  };\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={classnames('input', {\n                'is-danger': error,\n              })}\n              value={query}\n              onChange={(event) => {\n                setQuery(event.target.value);\n                setError(false);\n              }}\n            />\n          </div>\n\n          {error && (\n            <p className=\"help is-danger\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-light\"\n              onClick={() => getMovieFromServer(query)}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              type=\"submit\"\n              className=\"button is-primary\"\n            >\n              Add to the list\n            </button>\n          </div>\n        </div>\n      </form>\n\n      {movie && (\n        <div className=\"container\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard {...movie} />\n        </div>\n      )}\n    </>\n  );\n};\n\nFindMovie.propTypes = {\n  onAdd: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport data from './api/movies.json';\n\nexport const App = () => {\n  const [movies, setMovies] = useState(data);\n\n  const addMovie = (movie) => {\n    const findedDuplicate = movies.some(film => film.imdbId === movie.imdbId);\n\n    if (!findedDuplicate) {\n      setMovies(currentMovie => ([...currentMovie, movie]));\n    }\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <FindMovie onAdd={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}